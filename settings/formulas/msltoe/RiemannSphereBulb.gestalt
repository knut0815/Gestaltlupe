<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout " Value="100" />
  <Entry Key="Formula.Parameters.Parameter1" Value="1.7" />
  <Entry Key="Formula.Parameters.Parameter2" Value="1.7" />
  <Entry Key="Formula.Parameters.Parameter3" Value="1.7" />
  <Entry Key="Formula.Static.Cycles" Value="23" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="double _bailout = 20;&#xA;double rad2=0.5;&#xA;double _parameter1=1.7;&#xA;double _parameter2=1.7;&#xA;double _parameter3=1.7;&#xA;&#xA;&#xA;public override void Init()&#xA;{&#xA;  base.Init();&#xA;  _parameter1=GetOrSetDouble(&quot;Parameter1&quot;,1.7,&quot;Parameter 1&quot;);&#xA;  _parameter2=GetOrSetDouble(&quot;Parameter2&quot;,1.7,&quot;Parameter 2&quot;);&#xA;  _parameter3=GetOrSetDouble(&quot;Parameter3&quot;,1.7,&quot;Parameter 3&quot;);&#xA;  _bailout =GetOrSetDouble(&quot;bailout &quot;,20,&quot;bailout&quot;);&#xA;}&#xA;&#xA;&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  double norm = x*x+y*y+z*z;&#xA;  double maxnorm =0;&#xA;  double i=_jx;&#xA;  double j=_jy;&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    if (norm &lt; rad2*rad2)&#xA;    return false;&#xA;    x = x*_parameter1;&#xA;    y = y*_parameter2;&#xA;    z = z*_parameter3;&#xA;    double r1 = x*x + (y-1.0)*(y-1.0) + z*z;&#xA;    double x1 = 3.0 * x / r1;&#xA;    double y1 = 3.0 * (y-1.0) / r1+1.9;&#xA;    double z1 = 3.0 * z / r1;&#xA;    i = (int)Math.Round(x1);&#xA;    j = (int)Math.Round(z1);&#xA;    x = x1 - Math.Round(x1);&#xA;    y = y1;&#xA;    z = z1 - Math.Round(z1);&#xA;    norm = x*x+y*y+z*z;&#xA;    &#xA;    if (n &gt; _cycles / 3 &amp;&amp; n &lt; _cycles / 1.2)&#xA;    {&#xA;      additionalPointInfo.red += x*x / norm;&#xA;      additionalPointInfo.green += y*y / norm;&#xA;      additionalPointInfo.blue += z*z / norm;&#xA;    }&#xA;    &#xA;    if (norm &gt; _bailout) return false;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="6" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="0.5" />
  <Entry Key="Renderer.ColorFactor.Green" Value="0.001" />
  <Entry Key="Renderer.ColorFactor.Red" Value="3" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="0.626117133509171" />
  <Entry Key="Scene.CenterY" Value="-0.207834991433469" />
  <Entry Key="Scene.CenterZ" Value="-0.28841281431675" />
  <Entry Key="Scene.Radius" Value="0.964506172839508" />
  <Entry Key="Transformation.Camera.AngleX" Value="-72.7324072096124" />
  <Entry Key="Transformation.Camera.AngleY" Value="24.4044973378856" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-72.7324072096124" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>