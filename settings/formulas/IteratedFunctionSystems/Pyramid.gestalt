<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout " Value="0" />
  <Entry Key="Formula.Parameters.Parameter010" Value="0.1" />
  <Entry Key="Formula.Parameters.Parameter1" Value="0.5" />
  <Entry Key="Formula.Parameters.Parameter2" Value="0.241" />
  <Entry Key="Formula.Parameters.Parameter3" Value="3" />
  <Entry Key="Formula.Parameters.Parameter4" Value="1.5" />
  <Entry Key="Formula.Parameters.Parameter5" Value="0" />
  <Entry Key="Formula.Parameters.Parameter6" Value="0" />
  <Entry Key="Formula.Parameters.Parameter7" Value="0" />
  <Entry Key="Formula.Parameters.Parameter8" Value="0" />
  <Entry Key="Formula.Parameters.Parameter9" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="33" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="double _bailout = 0;&#xA;double rad2=0.5;&#xA;double _parameter1=1.7;&#xA;double _parameter2=1.7;&#xA;double _parameter3=1.7;&#xA;double _parameter4=3;&#xA;double _parameter5=3;&#xA;double _parameter6=3;&#xA;double _parameter7=1;&#xA;double _parameter8=1;&#xA;double _parameter9=1;&#xA;double _parameter10=1;&#xA;&#xA;&#xA;public override void Init()&#xA;{&#xA;  base.Init();&#xA;  _parameter1=GetOrSetDouble(&quot;Parameter1&quot;,1.7,&quot;Parameter 1&quot;);&#xA;  _parameter2=GetOrSetDouble(&quot;Parameter2&quot;,1.7,&quot;Parameter 2&quot;);&#xA;  _parameter3=GetOrSetDouble(&quot;Parameter3&quot;,1.7,&quot;Parameter 3&quot;);&#xA;  _parameter4=GetOrSetDouble(&quot;Parameter4&quot;,3,&quot;Parameter 4&quot;);&#xA;  _parameter5=GetOrSetDouble(&quot;Parameter5&quot;,3,&quot;Parameter 5&quot;);&#xA;  _parameter6=GetOrSetDouble(&quot;Parameter6&quot;,3,&quot;Parameter 6&quot;);&#xA;  _parameter7=GetOrSetDouble(&quot;Parameter7&quot;,1,&quot;Parameter 7&quot;);&#xA;  _parameter8=GetOrSetDouble(&quot;Parameter8&quot;,1,&quot;Parameter 8&quot;);&#xA;  _parameter9=GetOrSetDouble(&quot;Parameter9&quot;,1,&quot;Parameter 9&quot;);&#xA;  _parameter10=GetOrSetDouble(&quot;Parameter010&quot;,1.9,&quot;Parameter 10&quot;);&#xA;  _bailout =GetOrSetDouble(&quot;bailout &quot;,20,&quot;bailout&quot;);&#xA;}&#xA;&#xA;&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  double rad1 = _parameter1;&#xA;  double rad2 = _parameter2;&#xA;  double nSect = 2*Math.PI/_parameter3;&#xA;  double fact = _parameter4;&#xA;  double xx=x*x;&#xA;  double yy=y*y;&#xA;  double zz=z*z;&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double r1 = xx + yy + zz;&#xA;    if (r1 &lt; (rad1+rad2)*(rad1+rad2))&#xA;    {&#xA;      double r = Math.Sqrt(r1);&#xA;      double c1 = rad1 * x/r;&#xA;      double s1 = rad2 * y/r;&#xA;      double x1 = (x - c1);&#xA;      double y1 = (y - s1);&#xA;      double z1 = z;&#xA;      double r2 = x1*x1+y1*y1+z1*z1;&#xA;      if (r2 &lt; rad2*rad2)&#xA;      {&#xA;        return false;&#xA;      }&#xA;    }&#xA;    {&#xA;      double theta = Math.Atan2(y,x);&#xA;      double theta2 = nSect*Math.Round (theta / nSect);&#xA;      double c1 = Math.Cos(theta2);&#xA;      double s1 = Math.Sin(theta2);&#xA;      double x1 = c1 * x + s1 * y;&#xA;      double y1 = -s1 * x + c1 * y;&#xA;      double z1 = z;&#xA;      x1 = x1 - rad1;&#xA;      x=fact*x1;&#xA;      y=fact*z1;&#xA;      z=fact*y1;&#xA;    }&#xA;    xx=x*x;&#xA;    yy=y*y;&#xA;    zz=z*z;&#xA;    double norm = xx+yy + zz;&#xA;    if (n &gt; _cycles / 3 &amp;&amp; n &lt; _cycles / 1.2 &amp;&amp; norm&gt;0)&#xA;    {&#xA;      additionalPointInfo.red += xx / norm;&#xA;      additionalPointInfo.green += yy / norm;&#xA;      additionalPointInfo.blue += zz / norm;&#xA;    }&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="6" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="0.9" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="0.1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="0.454038733747622" />
  <Entry Key="Scene.CenterY" Value="0.310192632203668" />
  <Entry Key="Scene.CenterZ" Value="0.384532875820711" />
  <Entry Key="Scene.Radius" Value="1.73284075833167" />
  <Entry Key="Transformation.Camera.AngleX" Value="14.820155496695" />
  <Entry Key="Transformation.Camera.AngleY" Value="-26.8240898831256" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-72.783006345126" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>