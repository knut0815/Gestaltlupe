<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.boxcount" Value="0" />
  <Entry Key="Formula.Parameters.boxsize" Value="2" />
  <Entry Key="Formula.Parameters.cutatz" Value="0" />
  <Entry Key="Formula.Parameters.foldx" Value="1" />
  <Entry Key="Formula.Parameters.foldy" Value="1" />
  <Entry Key="Formula.Parameters.foldz" Value="1" />
  <Entry Key="Formula.Parameters.gr" Value="10160000" />
  <Entry Key="Formula.Parameters.is2d" Value="1" />
  <Entry Key="Formula.Parameters.maxr" Value="0" />
  <Entry Key="Formula.Parameters.minbail" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="500" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0.01" />
  <Entry Key="Formula.Static.jy" Value="0.02" />
  <Entry Key="Formula.Static.jz" Value="0.012" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="public   double gr=1112.5;&#xA;public double minbail=0;&#xA;public bool is2d=false;&#xA;public double boxsize=1;&#xA;public int boxcount=1;&#xA;public double maxr=1;&#xA;public bool foldx;&#xA;public bool foldy;&#xA;public bool foldz;&#xA;public bool cutatz;&#xA;// Mandelbox&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  if(cutatz&amp;&amp;z&gt;0) return is2d;&#xA;  double boxsize2=2.0*boxsize;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  double aar=0,aai=0,aaj=0;&#xA;  int xcount=0;&#xA;  int ycount=0;&#xA;  int zcount=0;&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xx = x * x;&#xA;    double yy = y * y;&#xA;    double zz= z * z;&#xA;    double r = x*x + y*y + z*z;&#xA;    if (r&gt;0 &amp;&amp;r &lt; minbail)&#xA;    {&#xA;      return is2d;&#xA;    }&#xA;    bool changed=foldx||foldy||foldz;&#xA;    for(int i=0;i&lt;boxcount&amp;&amp;changed;    i++)&#xA;    {&#xA;      changed=false;&#xA;      if(foldx)&#xA;      {&#xA;        if (x &gt; boxsize)&#xA;        {&#xA;          x = boxsize2 - x;&#xA;          changed=true;&#xA;        }&#xA;        else    if (x &lt; -boxsize)&#xA;        {&#xA;          x = -boxsize2 - x;&#xA;          changed=true;&#xA;        }&#xA;      }&#xA;      if(foldy)&#xA;      {&#xA;        if (y &gt; boxsize)&#xA;        {&#xA;          y = boxsize2 - y;&#xA;          changed=true;&#xA;        }&#xA;        else    if (y &lt; -boxsize)&#xA;        {&#xA;          y = -boxsize2 - y;&#xA;          changed=true;&#xA;        }&#xA;      }&#xA;      if(foldz)&#xA;      {&#xA;        if (z &gt; boxsize)&#xA;        {&#xA;          z = boxsize2 - z;&#xA;          changed=true;&#xA;        }&#xA;        else    if (z &lt; -boxsize)&#xA;        {&#xA;          z = -boxsize2 - z;&#xA;          changed=true;&#xA;        }&#xA;      }&#xA;    }&#xA;    if(r&gt;0&amp;&amp;n&gt;11&amp;&amp;r&lt;maxr)&#xA;    {&#xA;      //   x/=r;&#xA;      y/=r;&#xA;      z/=r;&#xA;    }&#xA;    xx = x * x;&#xA;    yy = y * y;&#xA;    zz= z * z;&#xA;    y = 2.0 * x * y ;&#xA;    z = 2.0 * x* z;&#xA;    x = xx - yy - zz;&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;    r = Math.Sqrt(x*x + y*y + z*z);&#xA;    if (r &gt; gr)&#xA;    {&#xA;      return is2d;&#xA;    }&#xA;    if(r&gt;0)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="14" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="10" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="1.4" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="0" />
  <Entry Key="Scene.CenterY" Value="0" />
  <Entry Key="Scene.CenterZ" Value="0" />
  <Entry Key="Scene.Radius" Value="2.0844747272597" />
  <Entry Key="Transformation.Camera.AngleX" Value="90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="1" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>