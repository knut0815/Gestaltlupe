<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.offsetM" Value="0" />
  <Entry Key="Formula.Parameters.scaleCw" Value="1.5" />
  <Entry Key="Formula.Parameters.scaleCx" Value="1.2" />
  <Entry Key="Formula.Parameters.scaleCy" Value="1.3" />
  <Entry Key="Formula.Parameters.scaleCz" Value="1.3" />
  <Entry Key="Formula.Parameters.scaleM " Value="1.5" />
  <Entry Key="Formula.Parameters.w" Value="1.4" />
  <Entry Key="Formula.Static.Cycles" Value="44" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="double _offsetM=0.1;&#xA;double _scaleM =1.5;&#xA;double _scaleCx=1;&#xA;double _scaleCy=1.5;&#xA;double _scaleCz=1.3;&#xA;double _scaleCw=1.5;&#xA;double _w=1.5;&#xA;&#xA;&#xA;public override void Init()&#xA;{&#xA;  base.Init();&#xA;  _offsetM=GetOrSetDouble(&quot;offsetM&quot;,0.1);&#xA;  _scaleM =GetOrSetDouble(&quot;scaleM &quot;,1.5);&#xA;  _scaleCx=GetOrSetDouble(&quot;scaleCx&quot;,1);&#xA;  _scaleCy=GetOrSetDouble(&quot;scaleCy&quot;,1.5);&#xA;  _scaleCz=GetOrSetDouble(&quot;scaleCz&quot;,1.3);&#xA;  _scaleCw=GetOrSetDouble(&quot;scaleCw&quot;,1.5);&#xA;  _w=GetOrSetDouble(&quot;w&quot;,1.5);&#xA;}&#xA;&#xA;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  double w=_w;&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xx = x*x;&#xA;    double yy = y*y;&#xA;    double zz = z*z;&#xA;    double ww = w*w;&#xA;    double r = xx + yy + zz + ww;&#xA;    if (r&gt;50) return false;&#xA;&#xA;double ax=x;&#xA;double ay=y;&#xA;double az=z;&#xA;double aw=w;&#xA;&#xA;&#xA;    if(ax+ay&lt;0.0)&#xA;    {&#xA;      x = -ay;&#xA;      y=-ax;&#xA;    }&#xA;    if(ax+az&lt;0.0)&#xA;    {&#xA;      x = -az;&#xA;      z=-ax;&#xA;    }&#xA;    if(ay+az&lt;0.0)&#xA;    {&#xA;      y = -az;&#xA;      z=-ay;&#xA;    }&#xA;    if(ax+aw&lt;0.0)&#xA;    {&#xA;      x = -aw;&#xA;      w=-ax;&#xA;    }&#xA;    if(ay+aw&lt;0.0)&#xA;    {&#xA;      y = -aw;&#xA;      w=-ay;&#xA;    }&#xA;    if(az+aw&lt;0.0)&#xA;    {&#xA;      z = -aw;&#xA;      w=-az;&#xA;    }&#xA;    z+=_offsetM;&#xA;    x= _scaleM *x-_scaleCx*( _scaleM -1);&#xA;    y= _scaleM *y-_scaleCy*( _scaleM -1);&#xA;    w= _scaleM *w-_scaleCw*( _scaleM -1);&#xA;    z-=0.5*_scaleCz*( _scaleM -1)/ _scaleM ;&#xA;    z=-Math.Abs(z);&#xA;    z+=0.5*_scaleCz*( _scaleM -1)/ _scaleM ;&#xA;    z= _scaleM *z;&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="4" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="-0.487824361365066" />
  <Entry Key="Scene.CenterY" Value="1.36780484121022" />
  <Entry Key="Scene.CenterZ" Value="0.174978594447616" />
  <Entry Key="Scene.Radius" Value="2.88" />
  <Entry Key="Transformation.Camera.AngleX" Value="14.550329155785" />
  <Entry Key="Transformation.Camera.AngleY" Value="1.45138780021082" />
  <Entry Key="Transformation.Camera.AngleZ" Value="10.0586664759453" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>