<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.cut" Value="1" />
  <Entry Key="Formula.Parameters.inverse" Value="1" />
  <Entry Key="Formula.Parameters.negcut" Value="0" />
  <Entry Key="Formula.Parameters.pow" Value="2" />
  <Entry Key="Formula.Parameters.rotj" Value="0" />
  <Entry Key="Formula.Parameters.rotxy" Value="3" />
  <Entry Key="Formula.Parameters.zd" Value="1.1" />
  <Entry Key="Formula.Parameters.zscale" Value="0.3" />
  <Entry Key="Formula.Static.Cycles" Value="146" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0.61" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double rotxy=0;&#xA;public double rotj=0;&#xA;public double pow=2;&#xA;public double zscale=1;&#xA;public double zd;&#xA;public bool inverse=false;&#xA;public bool negcut;&#xA;public bool cut;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;if(cut&amp;&amp;z&gt;zd)&#xA;return inverse;&#xA;else if(negcut&amp;&amp;z&lt;zd)&#xA;return inverse;&#xA;&#xA;z*=zscale;&#xA;double angle=z;&#xA;&#xA;&#xA;&#xA;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;double sin=pow*Math.Sin(angle);&#xA;double cos=pow*Math.Cos(angle);&#xA;&#xA;angle=rotj*z;&#xA; double   re = Math.Cos(angle);&#xA;  double  im = Math.Sin(angle);&#xA;  double  a = re * jx - im * jy;&#xA;    jy = re * jy + im * jx;&#xA;    jx = a;&#xA;&#xA;angle=rotxy*z;&#xA; re = Math.Cos(angle);&#xA;  im = Math.Sin(angle);&#xA;  a = re * x - im * y;&#xA;    y = re * y + im * x;&#xA;    x = a;&#xA;&#xA;&#xA;&#xA;Complex j=new Complex(jx,jy);&#xA;  Complex c=new Complex(x,y);&#xA;  Complex powc=new Complex(cos,sin);&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;//    c=new Complex(x,y);&#xA;double magnitutde=c.Magnitude;&#xA;    if(magnitutde&gt;4)&#xA;    return false;&#xA;    c=Complex.Pow(c,powc)+j;&#xA;if(magnitutde&gt;0)&#xA;{&#xA;Red+=Math.Abs(c.Real)/magnitutde;&#xA;Green+=Math.Abs(c.Imaginary)/magnitutde;&#xA;Blue+=magnitutde;&#xA;}&#xA;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="14" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="0.1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="2" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0.8" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="3" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="-0.260479321056427" />
  <Entry Key="Scene.CenterY" Value="0.0586016142916851" />
  <Entry Key="Scene.CenterZ" Value="0.900632726388195" />
  <Entry Key="Scene.Radius" Value="0.0900349175992101" />
  <Entry Key="Transformation.Camera.AngleX" Value="-47.8093431456059" />
  <Entry Key="Transformation.Camera.AngleY" Value="-6.1181017745639" />
  <Entry Key="Transformation.Camera.AngleZ" Value="1.64390365155561" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>