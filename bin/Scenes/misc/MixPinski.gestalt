<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._bail" Value="8000000" />
  <Entry Key="Formula.Parameters._offsetM" Value="0.2" />
  <Entry Key="Formula.Parameters._scaleCw" Value="1.5" />
  <Entry Key="Formula.Parameters._scaleCx" Value="1.5" />
  <Entry Key="Formula.Parameters._scaleCy" Value="1.4" />
  <Entry Key="Formula.Parameters._scaleCz" Value="1.1" />
  <Entry Key="Formula.Parameters._scaleM" Value="1.51" />
  <Entry Key="Formula.Parameters._w" Value="1.3" />
  <Entry Key="Formula.Parameters.is2d" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="142" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double _offsetM=0.1;&#xA;public double _scaleM =1.5;&#xA;public double _scaleCx=1;&#xA;public double _scaleCy=1.5;&#xA;public double _scaleCz=1.3;&#xA;public double _scaleCw=1.5;&#xA;public double _w=1.5;&#xA;public double _bail=5;&#xA;public bool is2d=false;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  double w=_w;&#xA;  double jx, jy, jz;&#xA;  double scaleMm1=_scaleM -1.0;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xx = x*x;&#xA;    double yy = y*y;&#xA;    double zz = z*z;&#xA;    double ww = w*w;&#xA;    double r = xx + yy + zz + ww;&#xA;    if (r&gt;_bail) return is2d;&#xA;    if(n&gt;2 &amp;&amp; r&gt;0)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;    double ax=x;&#xA;    double ay=y;&#xA;    double az=z;&#xA;    double aw=w;&#xA;    if(ax+ay&lt;0.0)&#xA;    {&#xA;      x = -ay;&#xA;      y=-ax;&#xA;    }&#xA;    if(ax+az&lt;0.0)&#xA;    {&#xA;      x = -az;&#xA;      z=-ax;&#xA;    }&#xA;    if(ay+az&lt;0.0)&#xA;    {&#xA;      y = -az;&#xA;      z=-ay;&#xA;    }&#xA;    if(ax+aw&lt;0.0)&#xA;    {&#xA;      x = -aw;&#xA;      w=-ax;&#xA;    }&#xA;    if(ay+aw&lt;0.0)&#xA;    {&#xA;      y = -aw;&#xA;      w=-ay;&#xA;    }&#xA;    if(az+aw&lt;0.0)&#xA;    {&#xA;      z = -aw;&#xA;      w=-az;&#xA;    }&#xA;    z+=_offsetM;&#xA;    x= _scaleM *x-_scaleCx*(scaleMm1);&#xA;    y= _scaleM *y-_scaleCy*(scaleMm1);&#xA;    w= _scaleM *w-_scaleCw*(scaleMm1);&#xA;    z-=0.5*_scaleCz*(scaleMm1)/ _scaleM ;&#xA;    z=-Math.Abs(z);&#xA;    z+=0.5*_scaleCz*(scaleMm1)/ _scaleM ;&#xA;    z= _scaleM *z;&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="14" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1.4" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1.2" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.915358755937457" />
  <Entry Key="Scene.CenterY" Value="0.199002320525691" />
  <Entry Key="Scene.CenterZ" Value="-0.199002320525691" />
  <Entry Key="Scene.Radius" Value="2.38802784630829" />
  <Entry Key="Transformation.Camera.AngleX" Value="180" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-90" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>