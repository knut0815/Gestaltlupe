<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout" Value="1E+200" />
  <Entry Key="Formula.Parameters.is2d" Value="0" />
  <Entry Key="Formula.Parameters.power" Value="8" />
  <Entry Key="Formula.Parameters.variantNeg" Value="0" />
  <Entry Key="Formula.Parameters.variantSin" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="120" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double power;&#xA;public double bailout;&#xA;public bool variantSin;&#xA;public bool variantNeg;&#xA;public bool is2d;&#xA;// Mandelbulb&#xA;// http://www.skytopia.com/project/fractal/2mandelbulb.html&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  double piAdd=0;&#xA;  double piAdd2=0;&#xA;  if(variantSin)&#xA;  {&#xA;    piAdd=Math.PI/2.0;&#xA;    piAdd2=Math.PI;&#xA;  }&#xA;  if(variantNeg)&#xA;  {&#xA;    piAdd+=Math.PI;&#xA;  }&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xx=x*x;&#xA;    double yy=y*y;&#xA;    double zz=z*z;&#xA;    double r=xx+yy+zz;&#xA;    if(r&gt;bailout) return is2d;&#xA;    if(r&gt;0)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;    // -- --  Formula -- -- --&#xA;    r = Math.Pow(r, power/2.0);&#xA;    double theta = Math.Atan2(Math.Sqrt(xx + yy), z);&#xA;    double phi = Math.Atan2(y, x);&#xA;    double phipow = phi * power+piAdd2;&#xA;    double thetapow =theta * power+piAdd;&#xA;    double sinthetapow=Math.Sin(thetapow);&#xA;    x = sinthetapow * Math.Cos(phipow);&#xA;    y = sinthetapow * Math.Sin(phipow);&#xA;    z = Math.Cos(thetapow);&#xA;    // -- -- -- -- -- -- -- --&#xA;    x*=r;&#xA;    y*=r;&#xA;    z*=r;&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="16" />
  <Entry Key="Renderer.2D.Quality" Value="2" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="1.2" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="-0.0901346491069211" />
  <Entry Key="Scene.CenterY" Value="0.451648620205725" />
  <Entry Key="Scene.CenterZ" Value="0.213045870237173" />
  <Entry Key="Scene.Radius" Value="1.66666666666667" />
  <Entry Key="Transformation.Camera.AngleX" Value="16.8188539698874" />
  <Entry Key="Transformation.Camera.AngleY" Value="3.44330557714855" />
  <Entry Key="Transformation.Camera.AngleZ" Value="18.3107024651713" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
  <Entry Key="View.Deph" Value="200" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Renderer" Value="3d" />
  <Entry Key="View.UpdateSteps" Value="0" />
</ParameterDict>