<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout" Value="100" />
  <Entry Key="Formula.Parameters.is2d" Value="0" />
  <Entry Key="Formula.Parameters.power" Value="2" />
  <Entry Key="Formula.Parameters.variant1" Value="1" />
  <Entry Key="Formula.Parameters.variantNeg" Value="1" />
  <Entry Key="Formula.Parameters.variantSin" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="295" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="1" />
  <Entry Key="Formula.Static.jy" Value="0.5" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;public double power;&#xA;public double bailout;&#xA;public bool variantSin;&#xA;public bool variantNeg;&#xA;public bool is2d;&#xA;public bool variant1;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  double piAdd=0;&#xA;  double piAdd2=0;&#xA;  if(variantSin)&#xA;  {&#xA;    piAdd=Math.PI/2.0;&#xA;    piAdd2=Math.PI;&#xA;  }&#xA;  if(variantNeg)&#xA;  {&#xA;    piAdd+=Math.PI;&#xA;    x=-x;&#xA;    y=-y;&#xA;  }&#xA;  double jx,jy,jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx=_jx;&#xA;    jy=_jy;&#xA;    jz=_jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx=x;&#xA;    jy=y;&#xA;    jz=z;&#xA;    x=_jx;&#xA;    y=_jy;&#xA;    z=_jz;&#xA;  }&#xA;  for (int n=1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xx=x*x;&#xA;    double yy=y*y;&#xA;    double zz=z*z;&#xA;    double r=xx+yy+zz;&#xA;    if(r&gt;bailout)return is2d;&#xA;    if(r&gt;0)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;    r=Math.Pow(r,power/2.0);&#xA;    double theta=Math.Atan2(Math.Sqrt(xx+yy),z);&#xA;    double phi=Math.Atan2(y,x);&#xA;    double phipow=phi * power+piAdd2;&#xA;    double thetapow=theta * power+piAdd;&#xA;    double sinthetapow=Math.Sin(thetapow);&#xA;    x=sinthetapow * Math.Cos(phipow);&#xA;    y=sinthetapow * Math.Sin(phipow);&#xA;    z=Math.Cos(thetapow);&#xA;    x*=r;&#xA;    y*=r;&#xA;    z*=r;&#xA;    if(!variant1 || n%2==1)&#xA;    {&#xA;      x+=jx;&#xA;      y+=jy;&#xA;      z+=jz;&#xA;    }&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="16" />
  <Entry Key="Renderer.2D.Quality" Value="2" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="-0.940654084611871" />
  <Entry Key="Scene.CenterY" Value="0.00388201026175898" />
  <Entry Key="Scene.CenterZ" Value="0.0663386494364746" />
  <Entry Key="Scene.Radius" Value="0.1" />
  <Entry Key="Transformation.Camera.AngleX" Value="-60" />
  <Entry Key="Transformation.Camera.AngleY" Value="-50" />
  <Entry Key="Transformation.Camera.AngleZ" Value="180" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
  <Entry Key="View.Deph" Value="300" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Renderer" Value="3d" />
  <Entry Key="View.UpdateSteps" Value="3" />
</ParameterDict>