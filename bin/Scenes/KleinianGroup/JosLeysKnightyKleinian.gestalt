<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout" Value="3.1" />
  <Entry Key="Formula.Parameters.box_size_x" Value="0.5" />
  <Entry Key="Formula.Parameters.box_size_y" Value="0" />
  <Entry Key="Formula.Parameters.box_size_z" Value="0.5" />
  <Entry Key="Formula.Parameters.KleinI" Value="-0.033" />
  <Entry Key="Formula.Parameters.KleinR" Value="1.94" />
  <Entry Key="Formula.Parameters.minBailout" Value="0.3" />
  <Entry Key="Formula.Parameters.useLineOfSeparation" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="44" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double KleinR=1;&#xA;public double KleinI=1;&#xA;public double box_size_x=1;&#xA;public double box_size_y=1;&#xA;public double box_size_z=1;&#xA;public double bailout=5;&#xA;public double minBailout=0.2;&#xA;public bool useLineOfSeparation=true;&#xA;// Escape time algorithm for Kleinian group limit sets from JosLeys and Knighty.&#xA;// http://www.fractalforums.com/index.php?topic=24728.0&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  double a = KleinR;&#xA;  double b = KleinI;&#xA;  double f = KleinI&lt;0 ? -1:1 ;&#xA;  for (int i = 0;i &lt; _cycles;  i++)&#xA;  {&#xA;    double vxx = x+box_size_x;&#xA;    double vxz = z+box_size_z;&#xA;    double vax = 2.0 * box_size_x ;&#xA;    double vaz = 2.0 * box_size_z;&#xA;    x = vxx-vax*Math.Floor(vxx/vax)- box_size_x;&#xA;    y-= KleinR*Math.Floor(y/KleinR);&#xA;    z = vxz-vaz*Math.Floor(vxz/vaz)- box_size_z ;&#xA;    if(useLineOfSeparation)&#xA;    {&#xA;      if  (y &gt;= KleinR * (0.5+0.1 * Math.Sin(f * Math.PI * x / box_size_x)))&#xA;      {&#xA;        x = -KleinI-x;&#xA;        y = KleinR-y;&#xA;        z = -z;&#xA;      }&#xA;    }&#xA;    double xx=x*x;&#xA;    double yy=y*y;&#xA;    double zz=z*z;&#xA;    double r=xx+yy+zz;&#xA;    if(r&gt;0)&#xA;    {&#xA;      x /= -r;&#xA;      y /= -r;&#xA;      z /= -r;&#xA;      if(r&gt;0.00000000001 &amp;&amp; i&gt;2)&#xA;      {&#xA;        Red+=xx/r;&#xA;        Green+=yy/r;&#xA;        Blue+=zz/r;&#xA;      }&#xA;      if(r&lt;minBailout) return false;&#xA;      if(r&gt;bailout) return false;&#xA;    }&#xA;    x = -KleinI - x;&#xA;    y = KleinR + y;&#xA;    x+= jx;&#xA;    y+= jy;&#xA;    z+= jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="8" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="0.1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0.2" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="4.62715121838949" />
  <Entry Key="Scene.CenterY" Value="1.23889226873824" />
  <Entry Key="Scene.CenterZ" Value="0.935347793631686" />
  <Entry Key="Scene.Radius" Value="0.073818689025995" />
  <Entry Key="Transformation.Camera.AngleX" Value="65.0528340203052" />
  <Entry Key="Transformation.Camera.AngleY" Value="-4.02927136476102" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-163.761451217425" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>