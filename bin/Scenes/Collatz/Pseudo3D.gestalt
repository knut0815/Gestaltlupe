<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._idiff" Value="1.0009" />
  <Entry Key="Formula.Parameters._idiff2" Value="1.0031" />
  <Entry Key="Formula.Parameters._idiff3" Value="1.0032" />
  <Entry Key="Formula.Parameters._idiff4" Value="1.032" />
  <Entry Key="Formula.Parameters._ii" Value="1000" />
  <Entry Key="Formula.Parameters._iz1" Value="0" />
  <Entry Key="Formula.Parameters._iz2" Value="0.7" />
  <Entry Key="Formula.Parameters._iz3" Value="0.83" />
  <Entry Key="Formula.Parameters._iz4" Value="0.96" />
  <Entry Key="Formula.Parameters._iz5" Value="1" />
  <Entry Key="Formula.Parameters.maxbail" Value="1E04" />
  <Entry Key="Formula.Parameters.zd" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="299" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double _ii=1;&#xA;public double _idiff=1;&#xA;public double _idiff2=1;&#xA;public double _idiff3=1;&#xA;public double _idiff4=1;&#xA;public double _iz1=1;&#xA;public double _iz2=0.75;&#xA;public double _iz3=0.9;&#xA;public double _iz4=0.98;&#xA;public double _iz5=0.995;&#xA;public double maxbail;&#xA;public double zd=1;&#xA;// Collatz&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;&#xA;  if(z&gt;0.05)&#xA;  return false;&#xA;z*=zd;&#xA;  double level=z;&#xA;  double cycles=3;&#xA;  for (double ii=0;ii&lt;_ii;  ii++)&#xA;  {&#xA;    if(cycles&lt;_cycles)&#xA;    {&#xA;      if(z&lt;-ii/_ii-_iz5)cycles=_cycles;&#xA;      if(z&lt;-ii/_ii-_iz4)cycles=cycles*_idiff4;&#xA;      else if(z&lt;-ii/_ii-_iz3)cycles=cycles*_idiff3;&#xA;      else if(z&lt;-ii/_ii-_iz2)cycles=cycles*_idiff2;&#xA;      else if(z&lt;-ii/_ii)cycles=cycles*_idiff;&#xA;    }&#xA;  }&#xA;  //  if(z&lt;-1)  return true;&#xA;  bool minzdetected=false;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  double xx,yy,zz,r;&#xA;  for (int n = 1;n &lt; cycles;  n++)&#xA;  {&#xA;    xx = x * x;&#xA;    yy = y * y;&#xA;    zz = z * z;&#xA;    r = Math.Sqrt(xx + yy);&#xA;    if(maxbail!=0&amp;&amp;r&gt;maxbail)&#xA;    {&#xA;      Red=0;&#xA;      Green=1;&#xA;      Blue=0;&#xA;      return !minzdetected;&#xA;    }&#xA;    if(level&lt;0&amp;&amp;r&gt;1E04)&#xA;    {&#xA;      Red=0;&#xA;      Green=1;&#xA;      Blue=0;&#xA;      return !minzdetected;&#xA;    }&#xA;    double a=x;&#xA;    double b=y;&#xA;    if(r&gt;0)&#xA;    {&#xA;      Red+=Math.Abs(x)/r;&#xA;      Green+=Math.Abs(y)/r;&#xA;      Blue+=Math.Abs(z)/r;&#xA;    }&#xA;    x=a+1.0/4.0&#xA;    -1.0/4.0*&#xA;    (&#xA;    (2.0*a+1)*Math.Cos(a)*Math.Cosh(b)&#xA;    +&#xA;    (2.0*b)*(Math.Sin(a)*Math.Sinh(b))&#xA;    );&#xA;    y=b&#xA;    -1.0/4.0*&#xA;    (&#xA;    -(2.0*a+1)*(Math.Sin(a)*Math.Sinh(b))&#xA;    +&#xA;    (2.0*b)*Math.Cos(a)*Math.Cosh(b)&#xA;    );&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return minzdetected;&#xA;  //  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="9" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="0.0001" />
  <Entry Key="Renderer.ColorFactor.Green" Value="0.701" />
  <Entry Key="Renderer.ColorFactor.Red" Value="10" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="1.6" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="3" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="-0.12333477036356" />
  <Entry Key="Scene.CenterY" Value="-1.50129994692836" />
  <Entry Key="Scene.CenterZ" Value="-0.556906576825776" />
  <Entry Key="Scene.Radius" Value="1.20687916398261" />
  <Entry Key="Transformation.Camera.AngleX" Value="56.7751922185164" />
  <Entry Key="Transformation.Camera.AngleY" Value="-4.75246824397289" />
  <Entry Key="Transformation.Camera.AngleZ" Value="14.8649470145239" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>