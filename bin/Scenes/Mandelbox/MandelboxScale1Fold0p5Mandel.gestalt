<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Static.Cycles" Value="150" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="-2.725" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="// Mandelbox with fold at 0.5 and scale = 1&#xA;&#xA;&#xA;public override long InSet(double x, double y, double z,&#xA;double br, double bi, double bj, double bk,&#xA;long zkl, bool invers)&#xA;{&#xA;  double bailout=10;&#xA;  long returnValue=0;&#xA;  double xx = x * x;&#xA;  double yy = y * y;&#xA;  double zz = z * z;&#xA;  double r = Math.Sqrt(xx + yy + zz);&#xA;  // Surface Coloring&#xA;  additionalPointInfo.red=0;&#xA;  additionalPointInfo.green=0;&#xA;  additionalPointInfo.blue=0;&#xA;  for (int n = 1;n &lt; zkl;  n++)&#xA;  {&#xA;    for(int i=0;i&lt;5;    i++)&#xA;    {&#xA;      bool somethingHappended=false;&#xA;      if (x &gt; 0.5)&#xA;      {&#xA;        x = 1.0 - x;&#xA;        somethingHappended=true;&#xA;      }&#xA;      else&#xA;      if (x &lt; -0.5)&#xA;      {&#xA;        x = -1.0 - x;&#xA;        somethingHappended=true;&#xA;      }&#xA;      if(!somethingHappended)&#xA;      break;&#xA;    }&#xA;    if (y &gt; 0.5)    y = 1.0 - y;&#xA;    else&#xA;    if (y &lt; -0.5) y = -1.0 - y;&#xA;    if (z &gt; 0.5)   z = 1.0 - z;&#xA;    else&#xA;    if (z &lt; -0.5) z = -1.0 - z;&#xA;    xx=x*x;&#xA;    yy=y*y;&#xA;    zz=z*z;&#xA;    r = xx + yy + zz;&#xA;    //  Surface Coloring&#xA;    if(r!=0)&#xA;    {&#xA;      additionalPointInfo.red+=xx/r;&#xA;      additionalPointInfo.green+=yy/r;&#xA;      additionalPointInfo.blue+=zz/r;&#xA;    }&#xA;    if (r &gt; bailout)&#xA;    {&#xA;      returnValue = n;&#xA;      break;&#xA;    }&#xA;    if (r &lt; 1 &amp;&amp; r&gt;0)&#xA;    {&#xA;      x/=r;&#xA;      y/=r;&#xA;      z/=r;&#xA;    }&#xA;    x+=br;&#xA;    y+=bi;&#xA;    z+=bj;&#xA;  }&#xA;  if (invers)&#xA;  {&#xA;    if (returnValue == 0) returnValue = 1;&#xA;    else returnValue = 0;&#xA;  }&#xA;  return returnValue;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="6" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="10" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1.5" />
  <Entry Key="Renderer.ColorFactor.Red" Value="7" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="-0.0220178699200039" />
  <Entry Key="Scene.CenterY" Value="-3.41180597903255" />
  <Entry Key="Scene.CenterZ" Value="-1.18333790089281" />
  <Entry Key="Scene.Radius" Value="1.23819224155998" />
  <Entry Key="Transformation.Camera.AngleX" Value="60" />
  <Entry Key="Transformation.Camera.AngleY" Value="3.81666561775622E-14" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-130" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="0.5" />
</ParameterDict>