<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._bailout" Value="1E+20" />
  <Entry Key="Formula.Parameters._jq" Value="1" />
  <Entry Key="Formula.Parameters._q" Value="0" />
  <Entry Key="Formula.Parameters.cut" Value="0" />
  <Entry Key="Formula.Parameters.dq" Value="0" />
  <Entry Key="Formula.Parameters.dx" Value="0" />
  <Entry Key="Formula.Parameters.dz" Value="0" />
  <Entry Key="Formula.Parameters.is2d" Value="0" />
  <Entry Key="Formula.Parameters.pow" Value="0" />
  <Entry Key="Formula.Parameters.yq" Value="0" />
  <Entry Key="Formula.Parameters.yx" Value="-1" />
  <Entry Key="Formula.Parameters.yz" Value="0" />
  <Entry Key="Formula.Parameters.zpow" Value="6.1" />
  <Entry Key="Formula.Parameters.zsc" Value="0" />
  <Entry Key="Formula.Parameters.zscale" Value="8.91" />
  <Entry Key="Formula.Static.Cycles" Value="243" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="1" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double zsc=0.2;&#xA;public double _bailout=20;&#xA;public double yz=0.5;&#xA;public double yx=0.5;&#xA;public double yq=0.5;&#xA;public double _q=0;&#xA;public double _jq=0;&#xA;public double pow=2;&#xA;public bool is2d;&#xA;public double dq;&#xA;public double dx;&#xA;public double dz;&#xA;public bool cut;&#xA;public double zscale;&#xA;public double zpow=1;&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  z*=zscale;&#xA;  {&#xA;    double zt=Math.Abs(z);&#xA;    double pt=Math.Pow(zt,zpow);&#xA;    if(z&lt;0) pt=-pt;&#xA;    z=(pt);&#xA;  }&#xA;  if(cut&amp;&amp;z&gt;1) return is2d;&#xA;  double q,jq;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;    jq=_jq;&#xA;    q=_q;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    jq=_q;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;    q=_jq;&#xA;  }&#xA;  for (double  i = 1;i &lt; _cycles;  i++)&#xA;  {&#xA;    double xx = x * x;&#xA;    double yy = y * y;&#xA;    double zz = (z) * (z);&#xA;    double qq=q*q;&#xA;    double r = xx + yy + zz+qq;&#xA;    if(pow!=0)&#xA;    {&#xA;      double rp = Math.Pow(xx+yy+zz+qq,pow);&#xA;      if(rp&gt;0)&#xA;      {&#xA;        x*=rp;&#xA;        y*=rp;&#xA;        z*=rp;&#xA;        q*=rp;&#xA;      }&#xA;    }&#xA;    if(r&gt;0 &amp;&amp; i&gt;3)&#xA;    {&#xA;      Red+=xx/r*i;&#xA;      Green+=yy/r*i;&#xA;      Blue=zz/r*i;&#xA;    }&#xA;    if (r &gt; _bailout) return is2d;&#xA;    y = 2 * x * y *z *q;&#xA;    z = zz - dz*( xx+qq)+yz*yy;&#xA;    x = xx -dx*( zz+qq)+yx*yy;&#xA;    q = qq -dq*( zz+xx)+yq*yy;&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;    q+=jq;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="14" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="807" />
  <Entry Key="Renderer.ColorFactor.Green" Value="0.001" />
  <Entry Key="Renderer.ColorFactor.Red" Value="0.0001" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="1.9" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="-1.10059317846302" />
  <Entry Key="Scene.CenterY" Value="0.292557360465875" />
  <Entry Key="Scene.CenterZ" Value="0.0402810505065592" />
  <Entry Key="Scene.Radius" Value="0.193415868475769" />
  <Entry Key="Transformation.Camera.AngleX" Value="-90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="1" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>