<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._yd" Value="1" />
  <Entry Key="Formula.Parameters.anglex" Value="22.5" />
  <Entry Key="Formula.Parameters.angley" Value="0" />
  <Entry Key="Formula.Parameters.anglez" Value="0" />
  <Entry Key="Formula.Parameters.bailout" Value="12" />
  <Entry Key="Formula.Parameters.box" Value="1" />
  <Entry Key="Formula.Parameters.scale" Value="1.25" />
  <Entry Key="Formula.Parameters.size" Value="0.5" />
  <Entry Key="Formula.Static.Cycles" Value="55" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="double x=0;&#xA;double y=0;&#xA;double z=0;&#xA;public double _yd=1;&#xA;double anglexAsDegree=0;&#xA;double angleyAsDegree=0;&#xA;double anglezAsDegree=0;&#xA;public double scale=1.5;&#xA;public double size=0.1;&#xA;public double bailout=12;&#xA;public bool box=true;&#xA;public double anglex;&#xA;public double angley;&#xA;public double anglez;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  anglexAsDegree=Math.PI*anglex/180.0;&#xA;  angleyAsDegree=Math.PI*angley/180.0;&#xA;  anglezAsDegree=Math.PI*anglez/180.0;&#xA;  this.x=x;&#xA;  this.y=y;&#xA;  this.z=z;&#xA;  return GetBool(_cycles);&#xA;}&#xA;bool GetBool(int cycles)&#xA;{&#xA;  if(cycles&lt;=0)return true;&#xA;  x+=_jx;&#xA;  y+=_jy;&#xA;  z+=_jz;&#xA;  double r=x*x+y*y+z*z;&#xA;  if(r&gt;bailout)return false;&#xA;  if(InSet())&#xA;  {&#xA;    Red=0.5;&#xA;    Green=0.5;&#xA;    Blue=3+0.3*(cycles-_cycles);&#xA;    if(additionalPointInfo.blue&lt;0)additionalPointInfo.blue=0;&#xA;    if(cycles&lt;40)&#xA;    {&#xA;      Red=40/cycles;&#xA;      Green=1-40/cycles;&#xA;      Blue=0;&#xA;    }&#xA;    return true;&#xA;  }&#xA;  Scale(scale);&#xA;  if(anglex!=0)RotateX(anglexAsDegree);&#xA;  if(angley!=0)RotateY(angleyAsDegree);&#xA;  if(anglez!=0)RotateZ(anglezAsDegree);&#xA;  double x1=x;&#xA;  double y1=y;&#xA;  double z1=z;&#xA;  y+=_yd;&#xA;  if(GetBool(cycles-1))return true;&#xA;  x=x1;&#xA;  y=y1;&#xA;  z=z1;&#xA;  y-=_yd;&#xA;  if(GetBool(cycles-1))return true;&#xA;  x=x1;&#xA;  y=y1;&#xA;  z=z1;&#xA;  return false;&#xA;}&#xA;bool InSet()&#xA;{&#xA;  if(box)return InBox();&#xA;  return InSphere();&#xA;}&#xA;bool InBox()&#xA;{&#xA;  if(x*x&gt;size)return false;&#xA;  if(y*y&gt;size)return false;&#xA;  if(z*z&gt;size)return false;&#xA;  return true;&#xA;}&#xA;bool InSphere()&#xA;{&#xA;  if(x*x+y*y+z*z&gt;size)return false;&#xA;  return true;&#xA;}&#xA;void Scale(double scale)&#xA;{&#xA;  x*=scale;&#xA;  y*=scale;&#xA;  z*=scale;&#xA;}&#xA;void RotateX(double angle)&#xA;{&#xA;  double re=Math.Cos(angle );&#xA;  double im=Math.Sin(angle );&#xA;  double a=re * y-im * z;&#xA;  z=re * z+im * y;&#xA;  y=a;&#xA;}&#xA;void RotateY(double angle)&#xA;{&#xA;  double re=Math.Cos(angle );&#xA;  double im=Math.Sin(angle );&#xA;  double a=re * x-im * z;&#xA;  z=re * z+im * x;&#xA;  x=a;&#xA;}&#xA;void RotateZ(double angle)&#xA;{&#xA;  double re=Math.Cos(angle );&#xA;  double im=Math.Sin(angle );&#xA;  double a=re * x-im * y;&#xA;  y=re * y+im * x;&#xA;  x=a;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="7" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="-1.31205445279311" />
  <Entry Key="Scene.CenterY" Value="-0.821247287171884" />
  <Entry Key="Scene.CenterZ" Value="-0.563560273849805" />
  <Entry Key="Scene.Radius" Value="3.77691171653579" />
  <Entry Key="Transformation.Camera.AngleX" Value="-0.409855217034559" />
  <Entry Key="Transformation.Camera.AngleY" Value="-23.3916795219528" />
  <Entry Key="Transformation.Camera.AngleZ" Value="112.925482270802" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>