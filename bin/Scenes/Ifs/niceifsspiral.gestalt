<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._anglex" Value="0" />
  <Entry Key="Formula.Parameters._angley" Value="0" />
  <Entry Key="Formula.Parameters._anglez" Value="33" />
  <Entry Key="Formula.Parameters._bailout" Value="33" />
  <Entry Key="Formula.Parameters._box" Value="1" />
  <Entry Key="Formula.Parameters._scale" Value="1.2" />
  <Entry Key="Formula.Parameters._size" Value="0" />
  <Entry Key="Formula.Parameters._xd" Value="4" />
  <Entry Key="Formula.Parameters._yd" Value="0.5" />
  <Entry Key="Formula.Parameters._zd" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="33" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double _xd;&#xA;public double _yd;&#xA;public double _zd;&#xA;public double _anglex;&#xA;public double _angley;&#xA;public double _anglez;&#xA;public double _scale;&#xA;public double _size;&#xA;public double _bailout;&#xA;public bool _box;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  return GetBool(_cycles,x,y,z);&#xA;}&#xA;bool GetBool(int cycles,double x,double y,double z)&#xA;{&#xA;  if(cycles&lt;=0)return true;&#xA;  double xx=x*x;&#xA;  double yy=y*y;&#xA;  double zz=z*z;&#xA;  double r=xx+yy+zz;&#xA;  if(r&lt;_size)return true;&#xA;  if(r&gt;_bailout)return false;&#xA;  if(r&gt;0.000001)&#xA;  {&#xA;    Red+=xx/r;&#xA;    Green+=yy/r;&#xA;    Blue+=zz/r;&#xA;  }&#xA;  x*=_scale;&#xA;  y*=_scale;&#xA;  z*=_scale;&#xA;  if(_anglex!=0)Rotate(Math.PI/180.0*_anglex,ref y,ref z);&#xA;  if(_angley!=0)Rotate(Math.PI/180.0*_angley,ref x,ref z);&#xA;  if(_anglez!=0)Rotate(Math.PI/180.0*_anglez,ref x,ref y);&#xA;  if(_xd!=0)&#xA;  {&#xA;    if(GetBool(cycles-1,x+_xd,y,z))return true;&#xA;    if(GetBool(cycles-1,x-_xd,y,z))return true;&#xA;  }&#xA;  if(_yd!=0)&#xA;  {&#xA;    if(GetBool(cycles-1,x,y+_yd,z))return true;&#xA;    if(GetBool(cycles-1,x,y-_yd,z))return true;&#xA;  }&#xA;  if(_zd!=0)&#xA;  {&#xA;    if(GetBool(cycles-1,x,y,z+_zd))return true;&#xA;    if(GetBool(cycles-1,x,y,z-_zd))return true;&#xA;  }&#xA;  return false;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="8" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="0.6" />
  <Entry Key="Renderer.ColorFactor.Green" Value="6" />
  <Entry Key="Renderer.ColorFactor.Red" Value="7" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0.4" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.23732989411149" />
  <Entry Key="Scene.CenterY" Value="-0.058917592905124" />
  <Entry Key="Scene.CenterZ" Value="-3.65784806031467" />
  <Entry Key="Scene.Radius" Value="4.65136078722756" />
  <Entry Key="Transformation.Camera.AngleX" Value="-90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>