<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.box" Value="True" />
  <Entry Key="Formula.Parameters.scale" Value="2" />
  <Entry Key="Formula.Parameters.size" Value="0.2" />
  <Entry Key="Formula.Parameters.xd" Value="1" />
  <Entry Key="Formula.Parameters.yd" Value="1" />
  <Entry Key="Formula.Parameters.zd" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="7" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0.3" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="double x=0;&#xA;double y=0;&#xA;double z=0;&#xA;public double xd = 1;&#xA;public double yd = 1;&#xA;public double zd = 1;&#xA;public double scale=1.5;&#xA;public double size=0.1;&#xA;public bool box=true;&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  this.x=x;&#xA;  this.y=y;&#xA;  this.z=z;&#xA;  return GetBool(_cycles);&#xA;}&#xA;bool GetBool(int cycles)&#xA;{&#xA;  x+=_jx;&#xA;  y+=_jy;&#xA;  z+=_jz;&#xA;  if(Bailout()) return true;&#xA;  if(cycles&lt;=0)return false;&#xA;  Scale(scale);&#xA;  double x1=x;&#xA;  double y1=y;&#xA;  double z1=z;&#xA;  {&#xA;    Move(0,yd,0);&#xA;    if(GetBool(cycles-1)) return true;&#xA;    x=x1;&#xA;    y=y1;&#xA;    z=z1;&#xA;    Move(xd,0,0);&#xA;    if(GetBool(cycles-1)) return true;&#xA;    x=x1;&#xA;    y=y1;&#xA;    z=z1;&#xA;    Move(0,0,zd);&#xA;    if(GetBool(cycles-1)) return true;&#xA;  }&#xA;  x=x1;&#xA;  y=y1;&#xA;  z=z1;&#xA;  return false;&#xA;}&#xA;bool Bailout()&#xA;{&#xA;  if(box) return BailoutBox();&#xA;  return BailoutSphere();&#xA;}&#xA;bool BailoutBox()&#xA;{&#xA;  if(x*x&gt;size) return false;&#xA;  if(y*y&gt;size) return false;&#xA;  if(z*z&gt;size) return false;&#xA;  return true;&#xA;}&#xA;bool BailoutSphere()&#xA;{&#xA;  if(x*x+y*y+z*z&gt;size) return false;&#xA;  return true;&#xA;}&#xA;void Move(double xdp,double ydp,double zdp)&#xA;{&#xA;  x+=xdp;&#xA;  y+=ydp;&#xA;  z+=zdp;&#xA;}&#xA;void Scale(double scale)&#xA;{&#xA;  x*=scale;&#xA;  y*=scale;&#xA;  z*=scale;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="7" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="-0.653173333805946" />
  <Entry Key="Scene.CenterY" Value="-0.385302417512227" />
  <Entry Key="Scene.CenterZ" Value="-0.632950269634198" />
  <Entry Key="Scene.Radius" Value="0.277625284277093" />
  <Entry Key="Transformation.Camera.AngleX" Value="127.775611289871" />
  <Entry Key="Transformation.Camera.AngleY" Value="85.4741310193562" />
  <Entry Key="Transformation.Camera.AngleZ" Value="93.8997353772648" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>