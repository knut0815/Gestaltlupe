<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.angleX" Value="0" />
  <Entry Key="Formula.Parameters.angleY" Value="0" />
  <Entry Key="Formula.Parameters.angleZ" Value="0" />
  <Entry Key="Formula.Parameters.bailout" Value="3" />
  <Entry Key="Formula.Parameters.offsetX" Value="1" />
  <Entry Key="Formula.Parameters.offsetY" Value="1" />
  <Entry Key="Formula.Parameters.offsetZ" Value="1" />
  <Entry Key="Formula.Parameters.scale" Value="3" />
  <Entry Key="Formula.Static.Cycles" Value="8" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double scale=4;&#xA;public double offsetX=1.5;&#xA;public double offsetY=1.5;&#xA;public double offsetZ=1.5;&#xA;public double bailout=2;&#xA;public double angleX=0;&#xA;public double angleY=0;&#xA;public double angleZ=0;&#xA;// Menger Sponge&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  double angleXInDegree=Math.PI/180.0*GetOrSetDouble(&quot;angleX&quot;);&#xA;  double angleYInDegree=Math.PI/180.0*GetOrSetDouble(&quot;angleY&quot;);&#xA;  double angleZInDegree=Math.PI/180.0*GetOrSetDouble(&quot;angleZ&quot;);&#xA;  double scale1=scale-1.0;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    x=Math.Abs(x);&#xA;    y=Math.Abs(y);&#xA;    z=Math.Abs(z);&#xA;    if(x&gt;bailout) return false;&#xA;    if(y&gt;bailout) return false;&#xA;    if(z&gt;bailout) return false;&#xA;    if (x&lt;y)&#xA;    {&#xA;      Red++;&#xA;      double a= x;&#xA;      x=y;&#xA;      y=a;&#xA;    }&#xA;    if (x&lt; z)&#xA;    {&#xA;      Green++;&#xA;      double a=x;&#xA;      x=z;&#xA;      z=a;&#xA;    }&#xA;    if (y&lt;z)&#xA;    {&#xA;      Blue++;&#xA;      double a=y;&#xA;      y=z;&#xA;      z = a;&#xA;    }&#xA;    x=scale*x-offsetX*(scale1);&#xA;    y=scale*y-offsetY*(scale1);&#xA;    z=scale*z-offsetZ*(scale1);&#xA;    if( z&lt;-0.5*offsetZ*(scale1))  z+=offsetZ*(scale1);&#xA;    if(angleX!=0)  Rotate(angleXInDegree,ref y,ref z);&#xA;    if(angleY!=0)  Rotate(angleYInDegree,ref x,ref z);&#xA;    if(angleZ!=0)  Rotate(angleZInDegree,ref x,ref y);&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;void Rotate(double angle,ref double x,ref double y)&#xA;{&#xA;  double re=Math.Cos(angle );&#xA;  double im=Math.Sin(angle );&#xA;  double a=re * x-im * y;&#xA;  y=re * y+im * x;&#xA;  x=a;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="7" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="10" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="1.8" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.47928894674717" />
  <Entry Key="Scene.CenterY" Value="-0.674225369706871" />
  <Entry Key="Scene.CenterZ" Value="-0.694272211818252" />
  <Entry Key="Scene.Radius" Value="2.53354016277523" />
  <Entry Key="Transformation.Camera.AngleX" Value="-44.373124365217" />
  <Entry Key="Transformation.Camera.AngleY" Value="63.4414563477275" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-96.3279863410774" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>