<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.angleX" Value="0" />
  <Entry Key="Formula.Parameters.angleY" Value="0" />
  <Entry Key="Formula.Parameters.angleZ" Value="0" />
  <Entry Key="Formula.Parameters.bailout" Value="3" />
  <Entry Key="Formula.Parameters.offsetX" Value="2" />
  <Entry Key="Formula.Parameters.offsetY" Value="2" />
  <Entry Key="Formula.Parameters.offsetZ" Value="2" />
  <Entry Key="Formula.Parameters.scale" Value="3" />
  <Entry Key="Formula.Static.Cycles" Value="8" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="double _scale=4;&#xA;double _offsetX=1.5;&#xA;double _offsetY=1.5;&#xA;double _offsetZ=1.5;&#xA;double _bailout=2;&#xA;double _angleX=0;&#xA;double _angleY=0;&#xA;double _angleZ=0;&#xA;&#xA;&#xA;public override void Init()&#xA;{&#xA;  base.Init();&#xA;  _scale=GetOrSetDouble(&quot;scale&quot;);&#xA;  _offsetX=GetOrSetDouble(&quot;offsetX&quot;);&#xA;  _offsetY=GetOrSetDouble(&quot;offsetY&quot;);&#xA;  _offsetZ=GetOrSetDouble(&quot;offsetZ&quot;);&#xA;  _bailout=GetOrSetDouble(&quot;bailout&quot;);&#xA;  _angleX=Math.PI/180.0*GetOrSetDouble(&quot;angleX&quot;);&#xA;  _angleY=Math.PI/180.0*GetOrSetDouble(&quot;angleY&quot;);&#xA;  _angleZ=Math.PI/180.0*GetOrSetDouble(&quot;angleZ&quot;);&#xA;}&#xA;// Menger Sponge&#xA;&#xA;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    x=Math.Abs(x);&#xA;    y=Math.Abs(y);&#xA;    z=Math.Abs(z);&#xA;    if(x&gt;_bailout) return false;&#xA;    if(y&gt;_bailout) return false;&#xA;    if(z&gt;_bailout) return false;&#xA;    x=_scale*x-_offsetX*(_scale-1);&#xA;    y=_scale*y-_offsetY*(_scale-1);&#xA;    z=_scale*z-_offsetZ*(_scale-1);&#xA;    if(x&lt;y &amp;&amp; x&lt;z &amp;&amp; x&lt;-0.5*_offsetX*(_scale-1.0)) x+=_offsetX*(_scale-1.0);&#xA;    else if(y&lt;x &amp;&amp; y&lt;z &amp;&amp; y&lt;-0.5*_offsetY*(_scale-1.0)) y+=_offsetY*(_scale-1.0);&#xA;    else if(z&lt;x &amp;&amp; z&lt;y &amp;&amp; z&lt;-0.5*_offsetZ*(_scale-1.0)) z+=_offsetZ*(_scale-1.0);&#xA;    if(_angleX!=0) Rotate(_angleX,ref y,ref z);&#xA;    if(_angleY!=0) Rotate(_angleY,ref x,ref z);&#xA;    if(_angleZ!=0) Rotate(_angleZ,ref x,ref y);&#xA;    x+=_jx;&#xA;    y+=_jy;&#xA;    z+=_jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;void Rotate(double angle,ref double x,ref double y)&#xA;{&#xA;  double re=Math.Cos(angle );&#xA;  double im=Math.Sin(angle );&#xA;  double a=re * x-im * y;&#xA;  y=re * y+im * x;&#xA;  x=a;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="7" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="1.67062182710023" />
  <Entry Key="Scene.CenterY" Value="1.05136999492655" />
  <Entry Key="Scene.CenterZ" Value="0.517756182850755" />
  <Entry Key="Scene.Radius" Value="4.47972126448041" />
  <Entry Key="Transformation.Camera.AngleX" Value="10.2074451858821" />
  <Entry Key="Transformation.Camera.AngleY" Value="-19.0315263881349" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-53.2901631402185" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>