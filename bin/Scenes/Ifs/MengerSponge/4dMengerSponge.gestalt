<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._rotation" Value="0" />
  <Entry Key="Formula.Parameters.boxSize" Value="3" />
  <Entry Key="Formula.Parameters.holeSize" Value="1" />
  <Entry Key="Formula.Parameters.jw" Value="0" />
  <Entry Key="Formula.Parameters.restrictToBox" Value="1" />
  <Entry Key="Formula.Parameters.variant1" Value="0" />
  <Entry Key="Formula.Parameters.variant2" Value="0" />
  <Entry Key="Formula.Parameters.w" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="6" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="&#xA;public double boxSize=3;&#xA;public double holeSize=1;&#xA;public double _rotation;&#xA;public bool variant1=false;&#xA;public bool variant2=false;&#xA;public bool restrictToBox=true;&#xA;public double w=0;&#xA;public double jw=0;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;  double rotation=Math.PI/180.0*_rotation;&#xA;  int iterations=6;&#xA;  x*=boxSize;&#xA;  y*=boxSize;&#xA;  z*=boxSize;&#xA;  if(restrictToBox)&#xA;  {&#xA;    if(x&gt; boxSize)return false;&#xA;    if(y&gt; boxSize)return false;&#xA;    if(z&gt; boxSize)return false;&#xA;    if(x&lt;-boxSize)return false;&#xA;    if(y&lt;-boxSize)return false;&#xA;    if(z&lt;-boxSize)return false;&#xA;  }&#xA;  for (int n=1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xa=Math.Abs(x);&#xA;    double ya=Math.Abs(y);&#xA;    double za=Math.Abs(z);&#xA;    double wa=Math.Abs(w);&#xA;    int holeCount=0;&#xA;    if(xa&lt;holeSize)holeCount++;&#xA;    if(ya&lt;holeSize)holeCount++;&#xA;    if(za&lt;holeSize)holeCount++;&#xA;    if(wa&lt;holeSize)holeCount++;&#xA;    if(holeCount==2)return false;&#xA;    if(holeCount==3 &amp;&amp; !variant1)return false;&#xA;    if(holeCount==4 &amp;&amp; !variant2)return false;&#xA;    if(x&gt; holeSize)&#xA;    {&#xA;      Red++;&#xA;      x-=2*holeSize;&#xA;    }&#xA;    if(x&lt;-holeSize)&#xA;    {&#xA;      Red--;&#xA;      x+=2*holeSize;&#xA;    }&#xA;    if(y&gt; holeSize)&#xA;    {&#xA;      Blue++;&#xA;      y-=2*holeSize;&#xA;    }&#xA;    if(y&lt;-holeSize)&#xA;    {&#xA;      Blue--;&#xA;      y+=2*holeSize;&#xA;    }&#xA;    if(z&gt; holeSize)&#xA;    {&#xA;      Green++;&#xA;      z-=2*holeSize;&#xA;    }&#xA;    if(z&lt;-holeSize)&#xA;    {&#xA;      Green--;&#xA;      z+=2*holeSize;&#xA;    }&#xA;    if(w&gt; holeSize)&#xA;    {&#xA;      w-=2*holeSize;&#xA;    }&#xA;    if(w&lt;-holeSize)&#xA;    {&#xA;      w+=2*holeSize;&#xA;    }&#xA;    x*=boxSize;&#xA;    y*=boxSize;&#xA;    z*=boxSize;&#xA;    w*=boxSize;&#xA;    if(rotation!=0)&#xA;    {&#xA;      int rotAxis=n%3;&#xA;      switch(rotAxis)&#xA;      {&#xA;        case 0:Rotate(rotation,ref x,ref y);&#xA;        break;&#xA;        case 1:Rotate(rotation,ref y,ref z);&#xA;        break;&#xA;        case 2:Rotate(rotation,ref z,ref x);&#xA;        break;&#xA;      }&#xA;    }&#xA;    x+=_jx;&#xA;    y+=_jy;&#xA;    z+=_jz;&#xA;    w+=jw;&#xA;  }&#xA;  return true;&#xA;}&#xA;double Red&#xA;{&#xA;  get&#xA;  {&#xA;    return additionalPointInfo.red;&#xA;  }&#xA;  set&#xA;  {&#xA;    additionalPointInfo.red=value;&#xA;  }&#xA;}&#xA;double Green&#xA;{&#xA;  get&#xA;  {&#xA;    return additionalPointInfo.green;&#xA;  }&#xA;  set&#xA;  {&#xA;    additionalPointInfo.green=value;&#xA;  }&#xA;}&#xA;double Blue&#xA;{&#xA;  get&#xA;  {&#xA;    return additionalPointInfo.blue;&#xA;  }&#xA;  set&#xA;  {&#xA;    additionalPointInfo.blue=value;&#xA;  }&#xA;}&#xA;void Rotate(double angle,ref double x,ref double y)&#xA;{&#xA;  double re=Math.Cos(angle );&#xA;  double im=Math.Sin(angle );&#xA;  double a=re * x-im * y;&#xA;  y=re * y+im * x;&#xA;  x=a;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="8" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.434524051129516" />
  <Entry Key="Scene.CenterY" Value="-0.394687739807139" />
  <Entry Key="Scene.CenterZ" Value="0.556764252694229" />
  <Entry Key="Scene.Radius" Value="2.41126543209877" />
  <Entry Key="Transformation.Camera.AngleX" Value="-56.8237813492991" />
  <Entry Key="Transformation.Camera.AngleY" Value="8.22168986587615" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-140.757279325551" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>