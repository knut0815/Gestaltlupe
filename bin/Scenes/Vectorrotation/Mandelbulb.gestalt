<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Static.Cycles" Value="41" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="int gr=20;&#xA;&#xA;public override long InSet(double x, double y, double z, double br, double bi, double bj, double bk, long zkl, bool inverse) &#xA;{&#xA;&#xA;long tw=0;&#xA;double r_n = 0;&#xA;&#xA;//if(bi&gt;0) return 1;&#xA;&#xA;additionalPointInfo.red = 0;&#xA;additionalPointInfo.green = 0;&#xA;additionalPointInfo.blue = 0;&#xA;          &#xA;double xx = x * x; &#xA;double yy = y * y; &#xA;double zz = z * z;&#xA;double r = Math.Sqrt(xx + yy + zz);&#xA;Fractrace.Geometry.VecRotation vecRot = new Fractrace.Geometry.VecRotation();&#xA;          &#xA;for (int n = 1; n &lt; zkl; n++) &#xA;{&#xA;            double r_xy = Math.Sqrt(xx + yy);&#xA;            double theta = Math.Atan2(Math.Sqrt(xx + yy), z);&#xA;            double phi = Math.Atan2(y, x);&#xA;&#xA;// rotation 1&#xA;&#xA;if(true)&#xA;{&#xA;            vecRot.X = 0;&#xA;            vecRot.Y =0;&#xA;            vecRot.Z =1;&#xA;            vecRot.Angle = -phi;&#xA;            vecRot.Normalize();&#xA;            Fractrace.Geometry.Vec3 pos=new Fractrace.Geometry.Vec3(x,y,z);&#xA;            Fractrace.Geometry.Vec3 newPos= vecRot.getTransform(pos);&#xA;            x = newPos.X;&#xA;            y = newPos.Y;&#xA;            z = newPos.Z;&#xA;}&#xA;&#xA;&#xA;// rotation 2&#xA;&#xA;if(true)&#xA;{&#xA;&#xA;            theta = Math.Atan2(z, x);&#xA;            vecRot.X = 0;&#xA;            vecRot.Y =-1;&#xA;            vecRot.Z =0;&#xA;            vecRot.Angle = theta ;&#xA;&#xA;            vecRot.Normalize();&#xA;            Fractrace.Geometry.Vec3 pos2=new Fractrace.Geometry.Vec3(x,y,z);&#xA;            Fractrace.Geometry.Vec3 newPos2= vecRot.getTransform(pos2);&#xA;            x = newPos2.X;&#xA;            y = newPos2.Y;&#xA;            z = newPos2.Z;&#xA;}&#xA;&#xA;&#xA;// rotation 3&#xA;&#xA;if(true)&#xA;{&#xA;            vecRot.X = 0;&#xA;            vecRot.Y =0;&#xA;            vecRot.Z =1;&#xA;            vecRot.Angle = 2*phi;&#xA;            vecRot.Normalize();&#xA;            Fractrace.Geometry.Vec3 pos=new Fractrace.Geometry.Vec3(x,y,z);&#xA;            Fractrace.Geometry.Vec3 newPos= vecRot.getTransform(pos);&#xA;            x = newPos.X;&#xA;            y = newPos.Y;&#xA;            z = newPos.Z;&#xA;}&#xA;&#xA;&#xA;            xx = x * x; yy = y * y; zz = z * z;// aak = ak * ak;&#xA;            r = Math.Sqrt(xx + yy + zz);&#xA;            x *= r;&#xA;            y *= r;&#xA;            z *= r;&#xA;            y += bj;&#xA;            x += br;&#xA;            z += bi;&#xA;&#xA;            if (r &gt; gr) {&#xA;              tw = n; break;&#xA;            }&#xA;&#xA;              if (n &gt; zkl/ 3 &amp;&amp; n &lt; zkl/ 1.2)&#xA;              {&#xA;                additionalPointInfo.red += xx / r;&#xA;                additionalPointInfo.green += yy / r;&#xA;                additionalPointInfo.blue += zz / r;&#xA;              }&#xA;&#xA;          }&#xA;&#xA;          if (inverse) {&#xA;            if (tw == 0)&#xA;              tw = 1;&#xA;            else&#xA;              tw = 0;&#xA;          }&#xA;          return (tw);&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="4" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="0.3" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1.4" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0.5" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="-0.49539692488491" />
  <Entry Key="Scene.CenterY" Value="-0.0939792727320185" />
  <Entry Key="Scene.CenterZ" Value="0.121629480854059" />
  <Entry Key="Scene.Radius" Value="1.82352120092976" />
  <Entry Key="Transformation.Camera.AngleX" Value="-90.0000003018545" />
  <Entry Key="Transformation.Camera.AngleY" Value="-39.9999985212207" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-70" />
  <Entry Key="Transformation.Perspective.Cameraposition" Value="1" />
  <Entry Key="View.Perspective" Value="0" />
</ParameterDict>