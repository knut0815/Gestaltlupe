<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters._positiveSinus" Value="1" />
  <Entry Key="Formula.Parameters._power" Value="2" />
  <Entry Key="Formula.Parameters.cutAtZ" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="75" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="public double _power=2;&#xA;public bool _positiveSinus=false;&#xA;public bool cutAtZ=false;&#xA;// Sinus Mandelbulb &#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  if(cutAtZ &amp;&amp; z&gt;0) return false;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  double re=0,im=0,a=0;&#xA;  for (int i=1 ;i&lt;_cycles; i++)&#xA;  {&#xA;    double phi = Math.Atan2(y, x);&#xA;    if(!_positiveSinus) phi+=Math.PI;&#xA;    // rotation 1:&#xA;    x = Math.Cos(-phi) * x - Math.Sin(-phi) * y;&#xA;    y=0;&#xA;    // rotation 2&#xA;    double theta = (_power-1)*Math.Atan2(z, x);&#xA;    re = Math.Cos(theta );&#xA;    im = Math.Sin(theta );&#xA;    a = re * x - im * z;&#xA;    z = re * z + im * x;&#xA;    x = a;&#xA;    // rotation 3&#xA;    re = Math.Cos(_power*phi);&#xA;    im = Math.Sin(_power*phi);&#xA;    a = re * x - im * y;&#xA;    y = re * y + im * x;&#xA;    x = a;&#xA;    double xx = x * x;&#xA;    double yy = y * y;&#xA;    double zz = z * z;&#xA;    double r = Math.Pow(xx + yy +zz,(_power-1)/2);&#xA;    x *= r;&#xA;    y *= r;&#xA;    z *= r;&#xA;    x += jx;&#xA;    y += jy;&#xA;    z += jz;&#xA;    if (r &gt; 9)&#xA;    return false;&#xA;    if (i &gt; _cycles/ 3 &amp;&amp; i &lt; _cycles/ 1.2)&#xA;    {&#xA;      Red += xx / r;&#xA;      Green += yy / r;&#xA;      Blue += zz / r;&#xA;    }&#xA;  }&#xA;  return (true);&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="4" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="0.4" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1.2" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0.5" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.273326767617688" />
  <Entry Key="Scene.CenterY" Value="-0.388958056637211" />
  <Entry Key="Scene.CenterZ" Value="0.40114102787459" />
  <Entry Key="Scene.Radius" Value="1.72030683464513" />
  <Entry Key="Transformation.Camera.AngleX" Value="-32.3069857562393" />
  <Entry Key="Transformation.Camera.AngleY" Value="-21.5840359625813" />
  <Entry Key="Transformation.Camera.AngleZ" Value="-140.202996972091" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>