<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.BulbVariant" Value="0" />
  <Entry Key="Formula.Parameters.Power" Value="2" />
  <Entry Key="Formula.Parameters.SinusVariant" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="350" />
  <Entry Key="Formula.Static.Formula" Value="-1" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="51" />
  <Entry Key="Intern.Formula.Source" Value="public override void Init()&#xA;{&#xA;  base.Init();&#xA;}&#xA;&#xA;public override bool GetBool(double xpos, double ypos, double zpos)&#xA;{&#xA;  double x=0;&#xA;  double y=0;&#xA;  double z=0;&#xA;  double xx =0;&#xA;  double yy = 0;&#xA;  double zz = 0;&#xA;  double r = 0;&#xA;  double re=0,im=0,a=0;&#xA;  double theta =0;&#xA;  bool spin=false;&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double phi = Math.Atan2(y, x);&#xA;    double x1=x;&#xA;    // rotation 1:&#xA;    x = Math.Cos(-phi) * x - Math.Sin(-phi) * y;&#xA;    y=0;&#xA;    // rotation 2&#xA;    theta = Math.Atan2(-z, -x);&#xA;    if(spin) theta=theta+Math.PI;&#xA;    double x2=x;&#xA;    re = Math.Cos(theta );&#xA;    im = Math.Sin(theta );&#xA;    a = re * x - im * z;&#xA;    z = re * z + im * x;&#xA;    x = a;&#xA;    if(x2*x&lt;0) spin=!spin;&#xA;    // rotation 3&#xA;    re = Math.Cos(2*phi);&#xA;    im = Math.Sin(2*phi);&#xA;    a = re * x - im * y;&#xA;    y = re * y + im * x;&#xA;    x = a;&#xA;    xx = x * x;&#xA;    yy = y * y;&#xA;    zz = z * z;&#xA;    r = xx + yy +zz;&#xA;    r=Math.Sqrt(r);&#xA;    x *= r;&#xA;    y *= r;&#xA;    z *= r;&#xA;    y += zpos;&#xA;    x += xpos;&#xA;    z += ypos;&#xA;    if (r &gt; 20) return false;&#xA;    if (n &gt; _cycles/ 3 &amp;&amp; n &lt; _cycles/ 1.2)&#xA;    {&#xA;      additionalPointInfo.red += xx / r;&#xA;      additionalPointInfo.green += yy / r;&#xA;      additionalPointInfo.blue += zz / r;&#xA;    }&#xA;  }&#xA;  return (true);&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="4" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1.5" />
  <Entry Key="Renderer.ColorFactor.Green" Value="2.3" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorGreyness" Value="0.5" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.278467323256199" />
  <Entry Key="Scene.CenterY" Value="3.65775770183506E-07" />
  <Entry Key="Scene.CenterZ" Value="0.0103165698035782" />
  <Entry Key="Scene.Radius" Value="3.68994554768067E-07" />
  <Entry Key="Transformation.Camera.AngleX" Value="178.476870899707" />
  <Entry Key="Transformation.Camera.AngleY" Value="-9.99653804400988" />
  <Entry Key="Transformation.Camera.AngleZ" Value="179.735541619113" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>