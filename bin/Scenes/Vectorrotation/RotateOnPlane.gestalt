<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.cut" Value="0" />
  <Entry Key="Formula.Parameters.gr" Value="1E+9" />
  <Entry Key="Formula.Parameters.inv" Value="0" />
  <Entry Key="Formula.Parameters.is2d" Value="0" />
  <Entry Key="Formula.Static.Cycles" Value="110" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.jzz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public int gr=20;&#xA;public bool cut=false;&#xA;public bool is2d=false;&#xA;public bool inv=false;&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  if(cut &amp;&amp; z&gt;0) return inv;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  Fractrace.Geometry.VecRotation vecRot = new Fractrace.Geometry.VecRotation();&#xA;  for (int n = 1;n &lt; _cycles;  n++)&#xA;  {&#xA;    double xx = x * x;&#xA;    double yy = y * y;&#xA;    double zz = z * z;&#xA;    double r = Math.Sqrt(xx + yy + zz);&#xA;    if (r&gt; gr)&#xA;    {&#xA;      return is2d;&#xA;    }&#xA;    double phi = Math.Atan2(y, x);&#xA;    vecRot.X =-x*z;&#xA;    vecRot.Y =y*z;&#xA;    vecRot.Z =xx+yy;&#xA;    vecRot.Angle = phi;&#xA;    vecRot.Normalize();&#xA;    Fractrace.Geometry.Vec3 pos=new Fractrace.Geometry.Vec3(x,y,z);&#xA;    Fractrace.Geometry.Vec3 newPos= vecRot.getTransform(pos);&#xA;    x = newPos.X;&#xA;    y = newPos.Y;&#xA;    z = newPos.Z;&#xA;    xx = x * x;&#xA;    yy = y * y;&#xA;    zz = z * z;&#xA;    r = Math.Sqrt(xx + yy +zz);&#xA;    x *= r;&#xA;    y *= r;&#xA;    z *= r;&#xA;    y += jy;&#xA;    x += jx;&#xA;    z += jz;&#xA;    if(n&gt;2)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="14" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="1" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="-0.569698782599162" />
  <Entry Key="Scene.CenterY" Value="-0.0189681630507343" />
  <Entry Key="Scene.CenterZ" Value="0.5" />
  <Entry Key="Scene.Radius" Value="2" />
  <Entry Key="Transformation.Camera.AngleX" Value="90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="1" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
</ParameterDict>