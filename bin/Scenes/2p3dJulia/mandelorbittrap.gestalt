<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout" Value="1E+200" />
  <Entry Key="Formula.Parameters.box" Value="0" />
  <Entry Key="Formula.Parameters.bx" Value="2" />
  <Entry Key="Formula.Parameters.by" Value="0.5" />
  <Entry Key="Formula.Parameters.bz" Value="1" />
  <Entry Key="Formula.Parameters.is2d" Value="0" />
  <Entry Key="Formula.Parameters.skipIteration" Value="1" />
  <Entry Key="Formula.Parameters.skipradius" Value="0.04" />
  <Entry Key="Formula.Parameters.zd" Value="171" />
  <Entry Key="Formula.Parameters.zHeight" Value="1" />
  <Entry Key="Formula.Parameters.zScale" Value="1" />
  <Entry Key="Formula.Parameters.zscale2" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="288" />
  <Entry Key="Formula.Static.Julia" Value="0" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double skipradius=0.1;&#xA;public double zScale=1;&#xA;public double zHeight=1;&#xA;public int skipIteration=1;&#xA;public bool is2d;&#xA;public double bailout;&#xA;public bool box;&#xA;public double bx;&#xA;public double by;&#xA;public double bz;&#xA;public double zscale2;&#xA;public double zd;&#xA;&#xA;public override bool GetBool(double x,double y,double z)&#xA;{&#xA;z*=zd;&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  for (int i=1;i &lt; _cycles;  i++)&#xA;  {&#xA;    double xx=x*x;&#xA;    double yy=y*y;&#xA;    double zz=z*z;&#xA;    double r=xx+yy+zScale*zz;&#xA;    if(r&gt;0)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;    if (r &gt; bailout)&#xA;    {&#xA;      return is2d;&#xA;    }&#xA;    if(box)&#xA;    {&#xA;      if(i&gt;skipIteration)&#xA;      {&#xA;        if(xx*bx&lt;skipradius &amp;&amp;yy*by&lt;skipradius &amp;&amp; zz*bz &lt;skipradius)&#xA;        return true;&#xA;      }&#xA;    }&#xA;    else&#xA;    {&#xA;      if(xx*bx+yy*by+zz*bz&lt;skipradius &amp;&amp; i&gt;skipIteration)return true;&#xA;    }&#xA;    y=2*x*y;&#xA;    x=xx-yy;&#xA;    z=zHeight*z*(-xx-yy+zscale2*zz);&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="16" />
  <Entry Key="Renderer.2D.Quality" Value="1" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="10" />
  <Entry Key="Renderer.ColorFactor.Green" Value="4.1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="0.1" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="1.9" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="0" />
  <Entry Key="Renderer.ColorIntensity" Value="5.1" />
  <Entry Key="Renderer.ColorOutside" Value="1" />
  <Entry Key="Scene.CenterX" Value="0.305769688135788" />
  <Entry Key="Scene.CenterY" Value="0.0233380741404905" />
  <Entry Key="Scene.CenterZ" Value="-0.000108751901871304" />
  <Entry Key="Scene.Radius" Value="0.00768265539212337" />
  <Entry Key="Transformation.Camera.AngleX" Value="90" />
  <Entry Key="Transformation.Camera.AngleY" Value="0" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="1" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
  <Entry Key="View.Deph" Value="300" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Renderer" Value="3d" />
  <Entry Key="View.UpdateSteps" Value="2" />
</ParameterDict>